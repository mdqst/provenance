// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/sharding/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgReadRequest reads from the store
type MsgReadRequest struct {
	// The signing authority for the request.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Reads only the owner from the store.
	OwnerRead bool `protobuf:"varint,2,opt,name=owner_read,json=ownerRead,proto3" json:"owner_read,omitempty"`
	// Reads only the coins from the store.
	CoinsRead bool `protobuf:"varint,3,opt,name=coins_read,json=coinsRead,proto3" json:"coins_read,omitempty"`
	// Reads only the name from the store.
	NameRead bool `protobuf:"varint,4,opt,name=name_read,json=nameRead,proto3" json:"name_read,omitempty"`
	// Reads only the color from the store.
	ColorRead bool `protobuf:"varint,5,opt,name=color_read,json=colorRead,proto3" json:"color_read,omitempty"`
	// Reads only the spots from the store.
	SpotsRead bool `protobuf:"varint,6,opt,name=spots_read,json=spotsRead,proto3" json:"spots_read,omitempty"`
	// Reads the entire object from store
	FullRead bool `protobuf:"varint,7,opt,name=full_read,json=fullRead,proto3" json:"full_read,omitempty"`
	// Reads the entire info object from store.
	GroupRead bool `protobuf:"varint,8,opt,name=group_read,json=groupRead,proto3" json:"group_read,omitempty"`
	// Attempts the new sharded read.
	ShardedRead bool `protobuf:"varint,9,opt,name=sharded_read,json=shardedRead,proto3" json:"sharded_read,omitempty"`
}

func (m *MsgReadRequest) Reset()         { *m = MsgReadRequest{} }
func (m *MsgReadRequest) String() string { return proto.CompactTextString(m) }
func (*MsgReadRequest) ProtoMessage()    {}
func (*MsgReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fb13fca802454, []int{0}
}
func (m *MsgReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReadRequest.Merge(m, src)
}
func (m *MsgReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReadRequest proto.InternalMessageInfo

func (m *MsgReadRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgReadRequest) GetOwnerRead() bool {
	if m != nil {
		return m.OwnerRead
	}
	return false
}

func (m *MsgReadRequest) GetCoinsRead() bool {
	if m != nil {
		return m.CoinsRead
	}
	return false
}

func (m *MsgReadRequest) GetNameRead() bool {
	if m != nil {
		return m.NameRead
	}
	return false
}

func (m *MsgReadRequest) GetColorRead() bool {
	if m != nil {
		return m.ColorRead
	}
	return false
}

func (m *MsgReadRequest) GetSpotsRead() bool {
	if m != nil {
		return m.SpotsRead
	}
	return false
}

func (m *MsgReadRequest) GetFullRead() bool {
	if m != nil {
		return m.FullRead
	}
	return false
}

func (m *MsgReadRequest) GetGroupRead() bool {
	if m != nil {
		return m.GroupRead
	}
	return false
}

func (m *MsgReadRequest) GetShardedRead() bool {
	if m != nil {
		return m.ShardedRead
	}
	return false
}

// MsgReadResponse is the response of the read request
type MsgReadResponse struct {
}

func (m *MsgReadResponse) Reset()         { *m = MsgReadResponse{} }
func (m *MsgReadResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReadResponse) ProtoMessage()    {}
func (*MsgReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fb13fca802454, []int{1}
}
func (m *MsgReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReadResponse.Merge(m, src)
}
func (m *MsgReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReadResponse proto.InternalMessageInfo

// MsgWriteRequest reads from the store
type MsgWriteRequest struct {
	// The signing authority for the request
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Writes only the owner to the store.
	OwnerWrite bool `protobuf:"varint,2,opt,name=owner_write,json=ownerWrite,proto3" json:"owner_write,omitempty"`
	// Writes only the coins to the store.
	CoinsWrite bool `protobuf:"varint,3,opt,name=coins_write,json=coinsWrite,proto3" json:"coins_write,omitempty"`
	// Writes only the name to the store.
	NameWrite bool `protobuf:"varint,4,opt,name=name_write,json=nameWrite,proto3" json:"name_write,omitempty"`
	// Writes only the color to the store.
	ColorWrite bool `protobuf:"varint,5,opt,name=color_write,json=colorWrite,proto3" json:"color_write,omitempty"`
	// Writes only the spots to the store.
	SpotsWrite bool `protobuf:"varint,6,opt,name=spots_write,json=spotsWrite,proto3" json:"spots_write,omitempty"`
	// Writes the entire object to store.
	FullWrite bool `protobuf:"varint,7,opt,name=full_write,json=fullWrite,proto3" json:"full_write,omitempty"`
	// Writes the entire info object to store.
	GroupWrite bool `protobuf:"varint,8,opt,name=group_write,json=groupWrite,proto3" json:"group_write,omitempty"`
	// Attempts the new sharded write.
	ShardedWrite bool `protobuf:"varint,9,opt,name=sharded_write,json=shardedWrite,proto3" json:"sharded_write,omitempty"`
}

func (m *MsgWriteRequest) Reset()         { *m = MsgWriteRequest{} }
func (m *MsgWriteRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWriteRequest) ProtoMessage()    {}
func (*MsgWriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fb13fca802454, []int{2}
}
func (m *MsgWriteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteRequest.Merge(m, src)
}
func (m *MsgWriteRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteRequest proto.InternalMessageInfo

func (m *MsgWriteRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgWriteRequest) GetOwnerWrite() bool {
	if m != nil {
		return m.OwnerWrite
	}
	return false
}

func (m *MsgWriteRequest) GetCoinsWrite() bool {
	if m != nil {
		return m.CoinsWrite
	}
	return false
}

func (m *MsgWriteRequest) GetNameWrite() bool {
	if m != nil {
		return m.NameWrite
	}
	return false
}

func (m *MsgWriteRequest) GetColorWrite() bool {
	if m != nil {
		return m.ColorWrite
	}
	return false
}

func (m *MsgWriteRequest) GetSpotsWrite() bool {
	if m != nil {
		return m.SpotsWrite
	}
	return false
}

func (m *MsgWriteRequest) GetFullWrite() bool {
	if m != nil {
		return m.FullWrite
	}
	return false
}

func (m *MsgWriteRequest) GetGroupWrite() bool {
	if m != nil {
		return m.GroupWrite
	}
	return false
}

func (m *MsgWriteRequest) GetShardedWrite() bool {
	if m != nil {
		return m.ShardedWrite
	}
	return false
}

// MsgWriteResponse is the response of the write request
type MsgWriteResponse struct {
}

func (m *MsgWriteResponse) Reset()         { *m = MsgWriteResponse{} }
func (m *MsgWriteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWriteResponse) ProtoMessage()    {}
func (*MsgWriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fb13fca802454, []int{3}
}
func (m *MsgWriteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWriteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWriteResponse.Merge(m, src)
}
func (m *MsgWriteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWriteResponse proto.InternalMessageInfo

// MsgUpdateRequest reads from the store and then writes to the store
type MsgUpdateRequest struct {
	// The signing authority for the request
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgUpdateRequest) Reset()         { *m = MsgUpdateRequest{} }
func (m *MsgUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequest) ProtoMessage()    {}
func (*MsgUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fb13fca802454, []int{4}
}
func (m *MsgUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequest.Merge(m, src)
}
func (m *MsgUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequest proto.InternalMessageInfo

func (m *MsgUpdateRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgUpdateResponse is the response of the update request
type MsgUpdateResponse struct {
}

func (m *MsgUpdateResponse) Reset()         { *m = MsgUpdateResponse{} }
func (m *MsgUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateResponse) ProtoMessage()    {}
func (*MsgUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d84fb13fca802454, []int{5}
}
func (m *MsgUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateResponse.Merge(m, src)
}
func (m *MsgUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgReadRequest)(nil), "provenance.sharding.v1.MsgReadRequest")
	proto.RegisterType((*MsgReadResponse)(nil), "provenance.sharding.v1.MsgReadResponse")
	proto.RegisterType((*MsgWriteRequest)(nil), "provenance.sharding.v1.MsgWriteRequest")
	proto.RegisterType((*MsgWriteResponse)(nil), "provenance.sharding.v1.MsgWriteResponse")
	proto.RegisterType((*MsgUpdateRequest)(nil), "provenance.sharding.v1.MsgUpdateRequest")
	proto.RegisterType((*MsgUpdateResponse)(nil), "provenance.sharding.v1.MsgUpdateResponse")
}

func init() { proto.RegisterFile("provenance/sharding/v1/tx.proto", fileDescriptor_d84fb13fca802454) }

var fileDescriptor_d84fb13fca802454 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x5d, 0x6b, 0xd3, 0x5e,
	0x1c, 0xc7, 0x9b, 0x6e, 0xed, 0xbf, 0xfd, 0xed, 0xef, 0xc3, 0xa2, 0x48, 0x57, 0x59, 0x36, 0x23,
	0x68, 0xbd, 0x58, 0xc2, 0x54, 0xbc, 0x77, 0x97, 0xc2, 0x40, 0x2a, 0x32, 0x18, 0xc8, 0xc8, 0x9a,
	0x63, 0x1a, 0x4c, 0x73, 0xe2, 0x39, 0x27, 0xdd, 0xf6, 0x2e, 0xbc, 0xf5, 0x7d, 0xf8, 0x02, 0xbc,
	0xf4, 0x72, 0x7a, 0xe5, 0xa5, 0xb4, 0x6f, 0x44, 0xf2, 0xfb, 0x26, 0x4d, 0x07, 0xba, 0x09, 0xbb,
	0xcc, 0xf7, 0xe9, 0x90, 0x0f, 0xc9, 0xa1, 0xad, 0x4c, 0xc9, 0xa9, 0x48, 0x83, 0x74, 0x24, 0x7c,
	0x3d, 0x0e, 0x54, 0x18, 0xa7, 0x91, 0x3f, 0xdd, 0xf5, 0xcd, 0xa9, 0x97, 0x29, 0x69, 0xa4, 0x7d,
	0xaf, 0x0e, 0x78, 0x55, 0xc0, 0x9b, 0xee, 0xf6, 0x37, 0x46, 0x52, 0x4f, 0xa4, 0x3e, 0xe2, 0x94,
	0x8f, 0x07, 0x54, 0xdc, 0xaf, 0x4d, 0xba, 0xb9, 0xaf, 0xa3, 0xa1, 0x08, 0xc2, 0xa1, 0xf8, 0x98,
	0x0b, 0x6d, 0xec, 0x17, 0xd4, 0x0d, 0x72, 0x33, 0x96, 0x2a, 0x36, 0x67, 0x3d, 0x6b, 0xdb, 0x1a,
	0x74, 0xf7, 0x7a, 0x3f, 0xbe, 0xec, 0xdc, 0x2d, 0x7b, 0x2f, 0xc3, 0x50, 0x09, 0xad, 0xdf, 0x18,
	0x15, 0xa7, 0xd1, 0xb0, 0x8e, 0xda, 0x9b, 0x44, 0xf2, 0x24, 0x15, 0xea, 0x48, 0x89, 0x20, 0xec,
	0x35, 0xb7, 0xad, 0x41, 0x67, 0xd8, 0x65, 0xa5, 0x58, 0x2f, 0xec, 0x91, 0x8c, 0x53, 0x0d, 0x7b,
	0x05, 0x36, 0x2b, 0x6c, 0xdf, 0xa7, 0x6e, 0x1a, 0x4c, 0x04, 0xdc, 0x55, 0x76, 0x3b, 0x85, 0x50,
	0x77, 0x13, 0x59, 0x4e, 0xb7, 0xaa, 0x6e, 0x22, 0x17, 0xd3, 0x3a, 0x93, 0xa6, 0x9c, 0x6e, 0xc3,
	0x66, 0xa5, 0x9a, 0x7e, 0x9f, 0x27, 0x09, 0xdc, 0xff, 0x30, 0x5d, 0x08, 0x55, 0x37, 0x52, 0x32,
	0xcf, 0xe0, 0x76, 0xd0, 0x65, 0x85, 0xed, 0x07, 0xf4, 0x3f, 0x93, 0x14, 0x21, 0x02, 0x5d, 0x0e,
	0xac, 0x95, 0x5a, 0x11, 0x71, 0xd7, 0xe9, 0xd6, 0x82, 0xa0, 0xce, 0x64, 0xaa, 0x85, 0xfb, 0xbd,
	0xc9, 0xda, 0x81, 0x8a, 0x8d, 0xb8, 0x2e, 0xd6, 0x2d, 0x5a, 0x03, 0xd6, 0x93, 0x62, 0xad, 0xe4,
	0x0a, 0xd2, 0xbc, 0x5f, 0x04, 0x00, 0x16, 0x01, 0x90, 0x05, 0x6b, 0x04, 0x36, 0x89, 0x18, 0x2d,
	0x7c, 0xb0, 0x65, 0xd8, 0x4b, 0xfd, 0x02, 0x2e, 0xfc, 0x56, 0xd5, 0x4f, 0x64, 0x7d, 0x00, 0xf0,
	0x22, 0x00, 0xbe, 0x20, 0xbe, 0x38, 0x80, 0x01, 0xc3, 0x07, 0x61, 0x46, 0xbe, 0xe8, 0x03, 0x31,
	0x7c, 0x30, 0x06, 0x75, 0x04, 0x1e, 0xd2, 0x8d, 0x0a, 0x32, 0x22, 0xa0, 0x5c, 0x91, 0xe7, 0x90,
	0x6b, 0xd3, 0xed, 0x1a, 0x69, 0xc9, 0xf9, 0x15, 0x6b, 0x6f, 0xb3, 0x30, 0xb8, 0x36, 0x67, 0xf7,
	0x0e, 0xad, 0x2f, 0x6d, 0xe1, 0x80, 0xa7, 0x9f, 0x9b, 0xb4, 0xb2, 0xaf, 0x23, 0xfb, 0x80, 0x56,
	0xf9, 0x73, 0x78, 0xe4, 0xfd, 0xf9, 0x17, 0xf3, 0x2e, 0xfe, 0x43, 0xfd, 0xc7, 0x57, 0xe6, 0x70,
	0x80, 0x7d, 0x48, 0x2d, 0x30, 0xb8, 0xac, 0xb1, 0xfc, 0x1d, 0xf5, 0x07, 0x57, 0x07, 0xcb, 0xed,
	0x77, 0xd4, 0xc6, 0xeb, 0xd8, 0x97, 0x75, 0x2e, 0xd0, 0xeb, 0x3f, 0xf9, 0x87, 0x24, 0xe6, 0xf7,
	0x3e, 0x7c, 0x9b, 0x39, 0xd6, 0xf9, 0xcc, 0xb1, 0x7e, 0xcd, 0x1c, 0xeb, 0xd3, 0xdc, 0x69, 0x9c,
	0xcf, 0x9d, 0xc6, 0xcf, 0xb9, 0xd3, 0xa0, 0x8d, 0x58, 0xfe, 0x65, 0xe6, 0xb5, 0x75, 0xf8, 0x3c,
	0x8a, 0xcd, 0x38, 0x3f, 0xf6, 0x46, 0x72, 0xe2, 0xd7, 0xa1, 0x9d, 0x58, 0x2e, 0x3d, 0xf9, 0xa7,
	0xf5, 0x05, 0x67, 0xce, 0x32, 0xa1, 0x8f, 0xdb, 0x7c, 0x5d, 0x3d, 0xfb, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x38, 0x9b, 0xf8, 0x13, 0x04, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Read is the RPC endpoint for reading from the module.
	Read(ctx context.Context, in *MsgReadRequest, opts ...grpc.CallOption) (*MsgReadResponse, error)
	// Write is the RPC endpoint for writing to the module.
	Write(ctx context.Context, in *MsgWriteRequest, opts ...grpc.CallOption) (*MsgWriteResponse, error)
	// Update is the RPC endpoint for reading and then writing to the module.
	Update(ctx context.Context, in *MsgUpdateRequest, opts ...grpc.CallOption) (*MsgUpdateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Read(ctx context.Context, in *MsgReadRequest, opts ...grpc.CallOption) (*MsgReadResponse, error) {
	out := new(MsgReadResponse)
	err := c.cc.Invoke(ctx, "/provenance.sharding.v1.Msg/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Write(ctx context.Context, in *MsgWriteRequest, opts ...grpc.CallOption) (*MsgWriteResponse, error) {
	out := new(MsgWriteResponse)
	err := c.cc.Invoke(ctx, "/provenance.sharding.v1.Msg/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Update(ctx context.Context, in *MsgUpdateRequest, opts ...grpc.CallOption) (*MsgUpdateResponse, error) {
	out := new(MsgUpdateResponse)
	err := c.cc.Invoke(ctx, "/provenance.sharding.v1.Msg/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Read is the RPC endpoint for reading from the module.
	Read(context.Context, *MsgReadRequest) (*MsgReadResponse, error)
	// Write is the RPC endpoint for writing to the module.
	Write(context.Context, *MsgWriteRequest) (*MsgWriteResponse, error)
	// Update is the RPC endpoint for reading and then writing to the module.
	Update(context.Context, *MsgUpdateRequest) (*MsgUpdateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Read(ctx context.Context, req *MsgReadRequest) (*MsgReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedMsgServer) Write(ctx context.Context, req *MsgWriteRequest) (*MsgWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedMsgServer) Update(ctx context.Context, req *MsgUpdateRequest) (*MsgUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.sharding.v1.Msg/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Read(ctx, req.(*MsgReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.sharding.v1.Msg/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Write(ctx, req.(*MsgWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.sharding.v1.Msg/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Update(ctx, req.(*MsgUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.sharding.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Msg_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Msg_Write_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Msg_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/sharding/v1/tx.proto",
}

func (m *MsgReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardedRead {
		i--
		if m.ShardedRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.GroupRead {
		i--
		if m.GroupRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FullRead {
		i--
		if m.FullRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SpotsRead {
		i--
		if m.SpotsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ColorRead {
		i--
		if m.ColorRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.NameRead {
		i--
		if m.NameRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CoinsRead {
		i--
		if m.CoinsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OwnerRead {
		i--
		if m.OwnerRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardedWrite {
		i--
		if m.ShardedWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.GroupWrite {
		i--
		if m.GroupWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FullWrite {
		i--
		if m.FullWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.SpotsWrite {
		i--
		if m.SpotsWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ColorWrite {
		i--
		if m.ColorWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.NameWrite {
		i--
		if m.NameWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CoinsWrite {
		i--
		if m.CoinsWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.OwnerWrite {
		i--
		if m.OwnerWrite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWriteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWriteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OwnerRead {
		n += 2
	}
	if m.CoinsRead {
		n += 2
	}
	if m.NameRead {
		n += 2
	}
	if m.ColorRead {
		n += 2
	}
	if m.SpotsRead {
		n += 2
	}
	if m.FullRead {
		n += 2
	}
	if m.GroupRead {
		n += 2
	}
	if m.ShardedRead {
		n += 2
	}
	return n
}

func (m *MsgReadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWriteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OwnerWrite {
		n += 2
	}
	if m.CoinsWrite {
		n += 2
	}
	if m.NameWrite {
		n += 2
	}
	if m.ColorWrite {
		n += 2
	}
	if m.SpotsWrite {
		n += 2
	}
	if m.FullWrite {
		n += 2
	}
	if m.GroupWrite {
		n += 2
	}
	if m.ShardedWrite {
		n += 2
	}
	return n
}

func (m *MsgWriteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerRead = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinsRead = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NameRead = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColorRead = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpotsRead = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullRead = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupRead = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardedRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShardedRead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerWrite = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CoinsWrite = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NameWrite = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ColorWrite = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotsWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpotsWrite = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullWrite = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupWrite = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardedWrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShardedWrite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
