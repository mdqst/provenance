// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/sharding/v1/pet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SmallObject is a smaller object to store
type PetInfo struct {
	// The name of the pet.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The color of the pet.
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// The breed of the pet.
	Breed string `protobuf:"bytes,3,opt,name=breed,proto3" json:"breed,omitempty"`
}

func (m *PetInfo) Reset()         { *m = PetInfo{} }
func (m *PetInfo) String() string { return proto.CompactTextString(m) }
func (*PetInfo) ProtoMessage()    {}
func (*PetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cca88222e6c7356, []int{0}
}
func (m *PetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PetInfo.Merge(m, src)
}
func (m *PetInfo) XXX_Size() int {
	return m.Size()
}
func (m *PetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PetInfo proto.InternalMessageInfo

func (m *PetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PetInfo) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *PetInfo) GetBreed() string {
	if m != nil {
		return m.Breed
	}
	return ""
}

// Object
type Pet struct {
	// An integer to uniquely identify the pet.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The owner of the pet.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The price of the pet.
	Coins []types.Coin `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins"`
	// Additional info on the pet.
	PetInfo PetInfo `protobuf:"bytes,4,opt,name=pet_info,json=petInfo,proto3" json:"pet_info"`
}

func (m *Pet) Reset()         { *m = Pet{} }
func (m *Pet) String() string { return proto.CompactTextString(m) }
func (*Pet) ProtoMessage()    {}
func (*Pet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cca88222e6c7356, []int{1}
}
func (m *Pet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pet.Merge(m, src)
}
func (m *Pet) XXX_Size() int {
	return m.Size()
}
func (m *Pet) XXX_DiscardUnknown() {
	xxx_messageInfo_Pet.DiscardUnknown(m)
}

var xxx_messageInfo_Pet proto.InternalMessageInfo

func (m *Pet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pet) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Pet) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Pet) GetPetInfo() PetInfo {
	if m != nil {
		return m.PetInfo
	}
	return PetInfo{}
}

func init() {
	proto.RegisterType((*PetInfo)(nil), "provenance.sharding.v1.PetInfo")
	proto.RegisterType((*Pet)(nil), "provenance.sharding.v1.Pet")
}

func init() { proto.RegisterFile("provenance/sharding/v1/pet.proto", fileDescriptor_3cca88222e6c7356) }

var fileDescriptor_3cca88222e6c7356 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbf, 0x8e, 0xda, 0x40,
	0x10, 0xc6, 0xbd, 0xd8, 0x04, 0xb2, 0x48, 0x29, 0x56, 0x28, 0x32, 0x14, 0xb6, 0x45, 0x45, 0xc3,
	0xae, 0x4c, 0x92, 0x86, 0x2a, 0x21, 0x55, 0xaa, 0x20, 0xa7, 0x4b, 0x83, 0xfc, 0x67, 0x31, 0xab,
	0x84, 0x1d, 0xcb, 0xbb, 0x71, 0x92, 0xb7, 0x48, 0x99, 0x92, 0x87, 0xb8, 0x87, 0xa0, 0x44, 0x57,
	0x5d, 0x75, 0x3a, 0x41, 0x73, 0x8f, 0x71, 0xb2, 0xd7, 0x27, 0xae, 0xb8, 0xeb, 0xe6, 0xfb, 0xe6,
	0x37, 0x63, 0x7f, 0x3b, 0x38, 0x28, 0x4a, 0xa8, 0xb8, 0x8c, 0x65, 0xca, 0x99, 0xda, 0xc6, 0x65,
	0x26, 0x64, 0xce, 0xaa, 0x90, 0x15, 0x5c, 0xd3, 0xa2, 0x04, 0x0d, 0xe4, 0xed, 0x85, 0xa0, 0x8f,
	0x04, 0xad, 0xc2, 0xb1, 0x97, 0x82, 0xda, 0x81, 0x62, 0x49, 0xac, 0x38, 0xab, 0xc2, 0x84, 0xeb,
	0x38, 0x64, 0x29, 0x08, 0x69, 0xe6, 0xc6, 0x23, 0xd3, 0x5f, 0x37, 0x8a, 0x19, 0xd1, 0xb6, 0x86,
	0x39, 0xe4, 0x60, 0xfc, 0xba, 0x32, 0xee, 0xe4, 0x2b, 0xee, 0xad, 0xb8, 0xfe, 0x22, 0x37, 0x40,
	0x08, 0x76, 0x64, 0xbc, 0xe3, 0x2e, 0x0a, 0xd0, 0xf4, 0x75, 0xd4, 0xd4, 0x64, 0x88, 0xbb, 0x29,
	0xfc, 0x84, 0xd2, 0xed, 0x34, 0xa6, 0x11, 0xb5, 0x9b, 0x94, 0x9c, 0x67, 0xae, 0x6d, 0xdc, 0x46,
	0x2c, 0x9c, 0xfb, 0xbd, 0x8f, 0x26, 0x07, 0x84, 0xed, 0x15, 0xd7, 0xe4, 0x0d, 0xee, 0x88, 0xac,
	0xd9, 0xe5, 0x44, 0x1d, 0x91, 0x11, 0x8a, 0xbb, 0xf0, 0x5b, 0xf2, 0x76, 0xd3, 0xd2, 0xbd, 0xbe,
	0x9a, 0x0d, 0xdb, 0xff, 0xfb, 0x94, 0x65, 0x25, 0x57, 0xea, 0x9b, 0x2e, 0x85, 0xcc, 0x23, 0x83,
	0x91, 0x0f, 0xf5, 0x97, 0x85, 0x54, 0xae, 0x1d, 0xd8, 0xd3, 0xc1, 0x7c, 0x44, 0x5b, 0xb8, 0x4e,
	0x4e, 0xdb, 0xe4, 0xf4, 0x33, 0x08, 0xb9, 0x74, 0x0e, 0xb7, 0xbe, 0x15, 0x19, 0x9a, 0x7c, 0xc4,
	0xfd, 0x82, 0xeb, 0xb5, 0x90, 0x1b, 0x70, 0x9d, 0x00, 0x4d, 0x07, 0x73, 0x9f, 0x3e, 0xff, 0x96,
	0xb4, 0xcd, 0xdd, 0xce, 0xf7, 0x0a, 0x23, 0x17, 0xfd, 0xff, 0x7b, 0x1f, 0xd5, 0x51, 0x96, 0x3f,
	0x0e, 0x27, 0x0f, 0x1d, 0x4f, 0x1e, 0xba, 0x3b, 0x79, 0xe8, 0xdf, 0xd9, 0xb3, 0x8e, 0x67, 0xcf,
	0xba, 0x39, 0x7b, 0x16, 0x1e, 0x09, 0x78, 0x61, 0xeb, 0x0a, 0x7d, 0x7f, 0x9f, 0x0b, 0xbd, 0xfd,
	0x95, 0xd0, 0x14, 0x76, 0xec, 0x02, 0xcd, 0x04, 0x3c, 0x51, 0xec, 0xcf, 0xe5, 0xf0, 0xfa, 0x6f,
	0xc1, 0x55, 0xf2, 0xaa, 0xb9, 0xc7, 0xbb, 0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x67, 0xb2,
	0x7c, 0x1c, 0x02, 0x00, 0x00,
}

func (this *PetInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PetInfo)
	if !ok {
		that2, ok := that.(PetInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Color != that1.Color {
		return false
	}
	if this.Breed != that1.Breed {
		return false
	}
	return true
}
func (this *Pet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pet)
	if !ok {
		that2, ok := that.(Pet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if len(this.Coins) != len(that1.Coins) {
		return false
	}
	for i := range this.Coins {
		if !this.Coins[i].Equal(&that1.Coins[i]) {
			return false
		}
	}
	if !this.PetInfo.Equal(&that1.PetInfo) {
		return false
	}
	return true
}
func (m *PetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Breed) > 0 {
		i -= len(m.Breed)
		copy(dAtA[i:], m.Breed)
		i = encodeVarintPet(dAtA, i, uint64(len(m.Breed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintPet(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PetInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPet(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPet(dAtA []byte, offset int, v uint64) int {
	offset -= sovPet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPet(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovPet(uint64(l))
	}
	l = len(m.Breed)
	if l > 0 {
		n += 1 + l + sovPet(uint64(l))
	}
	return n
}

func (m *Pet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPet(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovPet(uint64(l))
		}
	}
	l = m.PetInfo.Size()
	n += 1 + l + sovPet(uint64(l))
	return n
}

func sovPet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPet(x uint64) (n int) {
	return sovPet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Breed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPet = fmt.Errorf("proto: unexpected end of group")
)
