syntax = "proto3";
package provenance.sharding.v1;

import "cosmos_proto/cosmos.proto";

option go_package          = "github.com/provenance-io/provenance/x/sharding/types";
option java_package        = "io.provenance.sharding.v1";
option java_multiple_files = true;

// Msg
service Msg {
  // Read is the RPC endpoint for reading from the module.
  rpc Read(MsgReadRequest) returns (MsgReadResponse);
  // Write is the RPC endpoint for writing to the module.
  rpc Write(MsgWriteRequest) returns (MsgWriteResponse);
  // Update is the RPC endpoint for reading and then writing to the module.
  rpc Update(MsgUpdateRequest) returns (MsgUpdateResponse);
}

// MsgReadRequest reads from the store
message MsgReadRequest {
  // The signing authority for the request.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Reads only the owner from the store.
  bool owner_read = 2;
  // Reads only the name from the store.
  bool name_read = 4;
  // Reads only the color from the store.
  bool color_read = 5;
  // Reads only the spots from the store.
  bool spots_read = 6;

  // Reads the entire object from store
  bool full_read = 7;

  // Reads the entire info object from store.
  bool group_read = 8;

  // Attempts the new sharded read.
  bool sharded_read = 9;

  // Number of times to read
  uint64 iterations = 10;
}

// MsgReadResponse is the response of the read request
message MsgReadResponse {}

// MsgWriteRequest reads from the store
message MsgWriteRequest {
  // The signing authority for the request
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Writes only the owner to the store.
  bool owner_write = 2;
  // Writes only the name to the store.
  bool name_write = 4;
  // Writes only the color to the store.
  bool color_write = 5;
  // Writes only the spots to the store.
  bool spots_write = 6;

  // Writes the entire object to store.
  bool full_write = 7;

  // Writes the entire info object to store.
  bool group_write = 8;

  // Attempts the new sharded write.
  bool sharded_write = 9;

  // Number of times to write
  uint64 iterations = 10;
}

// MsgWriteResponse is the response of the write request
message MsgWriteResponse {}

// MsgUpdateRequest reads from the store and then writes to the store
message MsgUpdateRequest {
  // The signing authority for the request
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgUpdateResponse is the response of the update request
message MsgUpdateResponse {}